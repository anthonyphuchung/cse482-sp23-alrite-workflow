// Generated by Dagger (https://dagger.dev).
package org.openmrs.mobile.application;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWorkerFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.hilt.work.WorkerAssistedFactory;
import androidx.hilt.work.WorkerFactoryModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import androidx.work.WorkManager;
import androidx.work.WorkerParameters;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.openmrs.android_sdk.library.OpenMRSLogger;
import com.openmrs.android_sdk.library.api.RestApi;
import com.openmrs.android_sdk.library.api.repository.AllergyRepository;
import com.openmrs.android_sdk.library.api.repository.AllergyRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.BaseRepository_MembersInjector;
import com.openmrs.android_sdk.library.api.repository.ConceptRepository;
import com.openmrs.android_sdk.library.api.repository.ConceptRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.EncounterRepository;
import com.openmrs.android_sdk.library.api.repository.EncounterRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.FormRepository;
import com.openmrs.android_sdk.library.api.repository.FormRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.LocationRepository;
import com.openmrs.android_sdk.library.api.repository.LocationRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.LoginRepository;
import com.openmrs.android_sdk.library.api.repository.LoginRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.PatientRepository;
import com.openmrs.android_sdk.library.api.repository.PatientRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.ProviderRepository;
import com.openmrs.android_sdk.library.api.repository.ProviderRepository_Factory;
import com.openmrs.android_sdk.library.api.repository.VisitRepository;
import com.openmrs.android_sdk.library.api.repository.VisitRepository_Factory;
import com.openmrs.android_sdk.library.api.workers.UpdatePatientWorker;
import com.openmrs.android_sdk.library.api.workers.UpdatePatientWorker_AssistedFactory;
import com.openmrs.android_sdk.library.api.workers.allergy.DeleteAllergyWorker;
import com.openmrs.android_sdk.library.api.workers.allergy.DeleteAllergyWorker_AssistedFactory;
import com.openmrs.android_sdk.library.api.workers.provider.AddProviderWorker;
import com.openmrs.android_sdk.library.api.workers.provider.AddProviderWorker_AssistedFactory;
import com.openmrs.android_sdk.library.api.workers.provider.DeleteProviderWorker;
import com.openmrs.android_sdk.library.api.workers.provider.DeleteProviderWorker_AssistedFactory;
import com.openmrs.android_sdk.library.api.workers.provider.UpdateProviderWorker;
import com.openmrs.android_sdk.library.api.workers.provider.UpdateProviderWorker_AssistedFactory;
import com.openmrs.android_sdk.library.dao.AllergyRoomDAO;
import com.openmrs.android_sdk.library.dao.ConceptRoomDAO;
import com.openmrs.android_sdk.library.dao.EncounterDAO;
import com.openmrs.android_sdk.library.dao.LocationDAO;
import com.openmrs.android_sdk.library.dao.PatientDAO;
import com.openmrs.android_sdk.library.dao.ProviderRoomDAO;
import com.openmrs.android_sdk.library.dao.VisitDAO;
import com.openmrs.android_sdk.library.databases.AppDatabase;
import com.openmrs.android_sdk.library.di.modules.AppDatabaseModule;
import com.openmrs.android_sdk.library.di.modules.AppDatabaseModule_ProvideAllergyRoomDAOFactory;
import com.openmrs.android_sdk.library.di.modules.AppDatabaseModule_ProvideAppDatabaseFactory;
import com.openmrs.android_sdk.library.di.modules.AppDatabaseModule_ProvideConceptRoomDAOFactory;
import com.openmrs.android_sdk.library.di.modules.AppDatabaseModule_ProvideProviderRoomDAOFactory;
import com.openmrs.android_sdk.library.di.modules.ApplicationContextModule_ProvideApplicationContextFactory;
import com.openmrs.android_sdk.library.di.modules.OpenMRSLoggerModule;
import com.openmrs.android_sdk.library.di.modules.OpenMRSLoggerModule_ProvideLoggerFactory;
import com.openmrs.android_sdk.library.di.modules.RestServiceModule;
import com.openmrs.android_sdk.library.di.modules.RestServiceModule_ProvideRestServiceFactory;
import com.openmrs.android_sdk.library.di.modules.WorkManagerModule;
import com.openmrs.android_sdk.library.di.modules.WorkManagerModule_ProvideWorkManagerFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import org.openmrs.mobile.activities.ACBaseActivity;
import org.openmrs.mobile.activities.ACBaseActivity_MembersInjector;
import org.openmrs.mobile.activities.activevisits.ActiveVisitsActivity;
import org.openmrs.mobile.activities.activevisits.ActiveVisitsFragment;
import org.openmrs.mobile.activities.activevisits.ActiveVisitsViewModel;
import org.openmrs.mobile.activities.activevisits.ActiveVisitsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.addeditallergy.AddEditAllergyActivity;
import org.openmrs.mobile.activities.addeditallergy.AddEditAllergyFragment;
import org.openmrs.mobile.activities.addeditallergy.AddEditAllergyViewModel;
import org.openmrs.mobile.activities.addeditallergy.AddEditAllergyViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.addeditpatient.AddEditPatientActivity;
import org.openmrs.mobile.activities.addeditpatient.AddEditPatientFragment;
import org.openmrs.mobile.activities.addeditpatient.AddEditPatientViewModel;
import org.openmrs.mobile.activities.addeditpatient.AddEditPatientViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.addeditprovider.AddEditProviderActivity;
import org.openmrs.mobile.activities.addeditprovider.AddEditProviderFragment;
import org.openmrs.mobile.activities.addeditprovider.AddEditProviderViewModel;
import org.openmrs.mobile.activities.addeditprovider.AddEditProviderViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.community.contact.AboutActivity;
import org.openmrs.mobile.activities.community.contact.ContactUsActivity;
import org.openmrs.mobile.activities.community.contact.ContactUsViewModel;
import org.openmrs.mobile.activities.community.contact.ContactUsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.dashboard.DashboardActivity;
import org.openmrs.mobile.activities.dashboard.DashboardFragment;
import org.openmrs.mobile.activities.dashboard.DashboardViewModel;
import org.openmrs.mobile.activities.dashboard.DashboardViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.formadmission.FormAdmissionActivity;
import org.openmrs.mobile.activities.formadmission.FormAdmissionFragment;
import org.openmrs.mobile.activities.formadmission.FormAdmissionViewModel;
import org.openmrs.mobile.activities.formadmission.FormAdmissionViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.formdisplay.FormDisplayActivity;
import org.openmrs.mobile.activities.formdisplay.FormDisplayMainViewModel;
import org.openmrs.mobile.activities.formdisplay.FormDisplayMainViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.formdisplay.FormDisplayPageFragment;
import org.openmrs.mobile.activities.formdisplay.FormDisplayPageViewModel;
import org.openmrs.mobile.activities.formdisplay.FormDisplayPageViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.formentrypatientlist.FormEntryPatientListActivity;
import org.openmrs.mobile.activities.formentrypatientlist.FormEntryPatientListFragment;
import org.openmrs.mobile.activities.formentrypatientlist.FormEntryPatientListViewModel;
import org.openmrs.mobile.activities.formentrypatientlist.FormEntryPatientListViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.formlist.FormListActivity;
import org.openmrs.mobile.activities.formlist.FormListFragment;
import org.openmrs.mobile.activities.formlist.FormListViewModel;
import org.openmrs.mobile.activities.formlist.FormListViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.lastviewedpatients.LastViewedPatientsActivity;
import org.openmrs.mobile.activities.lastviewedpatients.LastViewedPatientsFragment;
import org.openmrs.mobile.activities.lastviewedpatients.LastViewedPatientsViewModel;
import org.openmrs.mobile.activities.lastviewedpatients.LastViewedPatientsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.login.LoginActivity;
import org.openmrs.mobile.activities.login.LoginFragment;
import org.openmrs.mobile.activities.login.LoginViewModel;
import org.openmrs.mobile.activities.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.logs.LogsActivity;
import org.openmrs.mobile.activities.logs.LogsFragment;
import org.openmrs.mobile.activities.logs.LogsViewModel;
import org.openmrs.mobile.activities.logs.LogsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.matchingpatients.MatchingPatientsActivity;
import org.openmrs.mobile.activities.matchingpatients.MatchingPatientsFragment;
import org.openmrs.mobile.activities.matchingpatients.MatchingPatientsViewModel;
import org.openmrs.mobile.activities.matchingpatients.MatchingPatientsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.PatientDashboardActivity;
import org.openmrs.mobile.activities.patientdashboard.PatientDashboardMainViewModel;
import org.openmrs.mobile.activities.patientdashboard.PatientDashboardMainViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.allergy.PatientAllergyFragment;
import org.openmrs.mobile.activities.patientdashboard.allergy.PatientDashboardAllergyViewModel;
import org.openmrs.mobile.activities.patientdashboard.allergy.PatientDashboardAllergyViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.charts.PatientChartsFragment;
import org.openmrs.mobile.activities.patientdashboard.charts.PatientDashboardChartsViewModel;
import org.openmrs.mobile.activities.patientdashboard.charts.PatientDashboardChartsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.details.PatientDashboardDetailsViewModel;
import org.openmrs.mobile.activities.patientdashboard.details.PatientDashboardDetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.details.PatientDetailsFragment;
import org.openmrs.mobile.activities.patientdashboard.diagnosis.PatientDashboardDiagnosisViewModel;
import org.openmrs.mobile.activities.patientdashboard.diagnosis.PatientDashboardDiagnosisViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.diagnosis.PatientDiagnosisFragment;
import org.openmrs.mobile.activities.patientdashboard.visits.PatientDashboardVisitsViewModel;
import org.openmrs.mobile.activities.patientdashboard.visits.PatientDashboardVisitsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.visits.PatientVisitsFragment;
import org.openmrs.mobile.activities.patientdashboard.vitals.PatientDashboardVitalsViewModel;
import org.openmrs.mobile.activities.patientdashboard.vitals.PatientDashboardVitalsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.patientdashboard.vitals.PatientVitalsFragment;
import org.openmrs.mobile.activities.providerdashboard.ProviderDashboardActivity;
import org.openmrs.mobile.activities.providerdashboard.ProviderDashboardViewModel;
import org.openmrs.mobile.activities.providerdashboard.ProviderDashboardViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.providerdashboard.patientrelationship.PatientRelationshipFragment;
import org.openmrs.mobile.activities.providerdashboard.providerrelationship.ProviderRelationshipFragment;
import org.openmrs.mobile.activities.providermanagerdashboard.ProviderManagerDashboardActivity;
import org.openmrs.mobile.activities.providermanagerdashboard.ProviderManagerDashboardFragment;
import org.openmrs.mobile.activities.providermanagerdashboard.ProviderManagerDashboardViewModel;
import org.openmrs.mobile.activities.providermanagerdashboard.ProviderManagerDashboardViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.settings.SettingsActivity;
import org.openmrs.mobile.activities.settings.SettingsFragment;
import org.openmrs.mobile.activities.settings.SettingsViewModel;
import org.openmrs.mobile.activities.settings.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.syncedpatients.SyncedPatientsActivity;
import org.openmrs.mobile.activities.syncedpatients.SyncedPatientsFragment;
import org.openmrs.mobile.activities.syncedpatients.SyncedPatientsViewModel;
import org.openmrs.mobile.activities.syncedpatients.SyncedPatientsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.activities.visitdashboard.VisitDashboardActivity;
import org.openmrs.mobile.activities.visitdashboard.VisitDashboardFragment;
import org.openmrs.mobile.activities.visitdashboard.VisitDashboardViewModel;
import org.openmrs.mobile.activities.visitdashboard.VisitDashboardViewModel_HiltModules_KeyModule_ProvideFactory;
import org.openmrs.mobile.services.ConceptDownloadService;
import org.openmrs.mobile.services.ConceptDownloadService_MembersInjector;
import org.openmrs.mobile.services.EncounterService;
import org.openmrs.mobile.services.EncounterService_MembersInjector;
import org.openmrs.mobile.services.FormListService;
import org.openmrs.mobile.services.FormListService_MembersInjector;
import org.openmrs.mobile.services.PatientService;
import org.openmrs.mobile.services.PatientService_MembersInjector;
import org.openmrs.mobile.services.UserService;
import org.openmrs.mobile.utilities.ForceClose;
import org.openmrs.mobile.utilities.ForceClose_Factory;
import org.openmrs.mobile.utilities.ForceClose_MembersInjector;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerOpenMRS_HiltComponents_SingletonC {
  private DaggerOpenMRS_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appDatabaseModule(AppDatabaseModule appDatabaseModule) {
      Preconditions.checkNotNull(appDatabaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder applicationContextModule(
        com.openmrs.android_sdk.library.di.modules.ApplicationContextModule applicationContextModule) {
      Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder openMRSLoggerModule(OpenMRSLoggerModule openMRSLoggerModule) {
      Preconditions.checkNotNull(openMRSLoggerModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder restServiceModule(RestServiceModule restServiceModule) {
      Preconditions.checkNotNull(restServiceModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder workManagerModule(WorkManagerModule workManagerModule) {
      Preconditions.checkNotNull(workManagerModule);
      return this;
    }

    public OpenMRS_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements OpenMRS_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public OpenMRS_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements OpenMRS_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public OpenMRS_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements OpenMRS_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public OpenMRS_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements OpenMRS_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public OpenMRS_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements OpenMRS_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public OpenMRS_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements OpenMRS_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public OpenMRS_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements OpenMRS_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public OpenMRS_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends OpenMRS_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends OpenMRS_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectActiveVisitsFragment(ActiveVisitsFragment arg0) {
    }

    @Override
    public void injectAddEditAllergyFragment(AddEditAllergyFragment arg0) {
    }

    @Override
    public void injectAddEditPatientFragment(AddEditPatientFragment arg0) {
    }

    @Override
    public void injectAddEditProviderFragment(AddEditProviderFragment arg0) {
    }

    @Override
    public void injectDashboardFragment(DashboardFragment arg0) {
    }

    @Override
    public void injectFormAdmissionFragment(FormAdmissionFragment arg0) {
    }

    @Override
    public void injectFormDisplayPageFragment(FormDisplayPageFragment arg0) {
    }

    @Override
    public void injectFormEntryPatientListFragment(FormEntryPatientListFragment arg0) {
    }

    @Override
    public void injectFormListFragment(FormListFragment arg0) {
    }

    @Override
    public void injectLastViewedPatientsFragment(LastViewedPatientsFragment arg0) {
    }

    @Override
    public void injectLoginFragment(LoginFragment arg0) {
    }

    @Override
    public void injectLogsFragment(LogsFragment arg0) {
    }

    @Override
    public void injectMatchingPatientsFragment(MatchingPatientsFragment arg0) {
    }

    @Override
    public void injectPatientAllergyFragment(PatientAllergyFragment arg0) {
    }

    @Override
    public void injectPatientChartsFragment(PatientChartsFragment arg0) {
    }

    @Override
    public void injectPatientDetailsFragment(PatientDetailsFragment arg0) {
    }

    @Override
    public void injectPatientDiagnosisFragment(PatientDiagnosisFragment arg0) {
    }

    @Override
    public void injectPatientVisitsFragment(PatientVisitsFragment arg0) {
    }

    @Override
    public void injectPatientVitalsFragment(PatientVitalsFragment arg0) {
    }

    @Override
    public void injectPatientRelationshipFragment(PatientRelationshipFragment arg0) {
    }

    @Override
    public void injectProviderRelationshipFragment(ProviderRelationshipFragment arg0) {
    }

    @Override
    public void injectProviderManagerDashboardFragment(ProviderManagerDashboardFragment arg0) {
    }

    @Override
    public void injectSettingsFragment(SettingsFragment arg0) {
    }

    @Override
    public void injectSyncedPatientsFragment(SyncedPatientsFragment arg0) {
    }

    @Override
    public void injectVisitDashboardFragment(VisitDashboardFragment arg0) {
    }
  }

  private static final class ViewCImpl extends OpenMRS_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends OpenMRS_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    private ForceClose forceClose() {
      return injectForceClose(ForceClose_Factory.newInstance(singletonCImpl.provideApplicationContextProvider.get()));
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(ActiveVisitsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddEditAllergyViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddEditPatientViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddEditProviderViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ContactUsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DashboardViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FormAdmissionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FormDisplayMainViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FormDisplayPageViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FormEntryPatientListViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FormListViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LastViewedPatientsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LogsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MatchingPatientsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardAllergyViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardChartsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardDetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardDiagnosisViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardMainViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardVisitsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PatientDashboardVitalsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProviderDashboardViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProviderManagerDashboardViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SyncedPatientsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), VisitDashboardViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectACBaseActivity(ACBaseActivity arg0) {
      injectACBaseActivity2(arg0);
    }

    @Override
    public void injectActiveVisitsActivity(ActiveVisitsActivity arg0) {
      injectActiveVisitsActivity2(arg0);
    }

    @Override
    public void injectAddEditAllergyActivity(AddEditAllergyActivity arg0) {
      injectAddEditAllergyActivity2(arg0);
    }

    @Override
    public void injectAddEditPatientActivity(AddEditPatientActivity arg0) {
      injectAddEditPatientActivity2(arg0);
    }

    @Override
    public void injectAddEditProviderActivity(AddEditProviderActivity arg0) {
      injectAddEditProviderActivity2(arg0);
    }

    @Override
    public void injectAboutActivity(AboutActivity arg0) {
      injectAboutActivity2(arg0);
    }

    @Override
    public void injectContactUsActivity(ContactUsActivity arg0) {
      injectContactUsActivity2(arg0);
    }

    @Override
    public void injectDashboardActivity(DashboardActivity arg0) {
      injectDashboardActivity2(arg0);
    }

    @Override
    public void injectFormAdmissionActivity(FormAdmissionActivity arg0) {
      injectFormAdmissionActivity2(arg0);
    }

    @Override
    public void injectFormDisplayActivity(FormDisplayActivity arg0) {
      injectFormDisplayActivity2(arg0);
    }

    @Override
    public void injectFormEntryPatientListActivity(FormEntryPatientListActivity arg0) {
      injectFormEntryPatientListActivity2(arg0);
    }

    @Override
    public void injectFormListActivity(FormListActivity arg0) {
      injectFormListActivity2(arg0);
    }

    @Override
    public void injectLastViewedPatientsActivity(LastViewedPatientsActivity arg0) {
      injectLastViewedPatientsActivity2(arg0);
    }

    @Override
    public void injectLoginActivity(LoginActivity arg0) {
      injectLoginActivity2(arg0);
    }

    @Override
    public void injectLogsActivity(LogsActivity arg0) {
      injectLogsActivity2(arg0);
    }

    @Override
    public void injectMatchingPatientsActivity(MatchingPatientsActivity arg0) {
      injectMatchingPatientsActivity2(arg0);
    }

    @Override
    public void injectPatientDashboardActivity(PatientDashboardActivity arg0) {
      injectPatientDashboardActivity2(arg0);
    }

    @Override
    public void injectProviderDashboardActivity(ProviderDashboardActivity arg0) {
      injectProviderDashboardActivity2(arg0);
    }

    @Override
    public void injectProviderManagerDashboardActivity(ProviderManagerDashboardActivity arg0) {
      injectProviderManagerDashboardActivity2(arg0);
    }

    @Override
    public void injectSettingsActivity(SettingsActivity arg0) {
      injectSettingsActivity2(arg0);
    }

    @Override
    public void injectSyncedPatientsActivity(SyncedPatientsActivity arg0) {
      injectSyncedPatientsActivity2(arg0);
    }

    @Override
    public void injectVisitDashboardActivity(VisitDashboardActivity arg0) {
      injectVisitDashboardActivity2(arg0);
    }

    @CanIgnoreReturnValue
    private ForceClose injectForceClose(ForceClose instance) {
      ForceClose_MembersInjector.injectMOpenMRSLogger(instance, singletonCImpl.provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ACBaseActivity injectACBaseActivity2(ACBaseActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private ActiveVisitsActivity injectActiveVisitsActivity2(ActiveVisitsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private AddEditAllergyActivity injectAddEditAllergyActivity2(AddEditAllergyActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private AddEditPatientActivity injectAddEditPatientActivity2(AddEditPatientActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private AddEditProviderActivity injectAddEditProviderActivity2(
        AddEditProviderActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private AboutActivity injectAboutActivity2(AboutActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactUsActivity injectContactUsActivity2(ContactUsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private DashboardActivity injectDashboardActivity2(DashboardActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private FormAdmissionActivity injectFormAdmissionActivity2(FormAdmissionActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private FormDisplayActivity injectFormDisplayActivity2(FormDisplayActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private FormEntryPatientListActivity injectFormEntryPatientListActivity2(
        FormEntryPatientListActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private FormListActivity injectFormListActivity2(FormListActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private LastViewedPatientsActivity injectLastViewedPatientsActivity2(
        LastViewedPatientsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity2(LoginActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private LogsActivity injectLogsActivity2(LogsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private MatchingPatientsActivity injectMatchingPatientsActivity2(
        MatchingPatientsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private PatientDashboardActivity injectPatientDashboardActivity2(
        PatientDashboardActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private ProviderDashboardActivity injectProviderDashboardActivity2(
        ProviderDashboardActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private ProviderManagerDashboardActivity injectProviderManagerDashboardActivity2(
        ProviderManagerDashboardActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private SettingsActivity injectSettingsActivity2(SettingsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private SyncedPatientsActivity injectSyncedPatientsActivity2(SyncedPatientsActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }

    @CanIgnoreReturnValue
    private VisitDashboardActivity injectVisitDashboardActivity2(VisitDashboardActivity instance) {
      ACBaseActivity_MembersInjector.injectForceClose(instance, forceClose());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends OpenMRS_HiltComponents.ViewModelC {
    private final SavedStateHandle savedStateHandle;

    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ActiveVisitsViewModel> activeVisitsViewModelProvider;

    private Provider<AddEditAllergyViewModel> addEditAllergyViewModelProvider;

    private Provider<AddEditPatientViewModel> addEditPatientViewModelProvider;

    private Provider<AddEditProviderViewModel> addEditProviderViewModelProvider;

    private Provider<ContactUsViewModel> contactUsViewModelProvider;

    private Provider<DashboardViewModel> dashboardViewModelProvider;

    private Provider<FormAdmissionViewModel> formAdmissionViewModelProvider;

    private Provider<FormDisplayMainViewModel> formDisplayMainViewModelProvider;

    private Provider<FormDisplayPageViewModel> formDisplayPageViewModelProvider;

    private Provider<FormEntryPatientListViewModel> formEntryPatientListViewModelProvider;

    private Provider<FormListViewModel> formListViewModelProvider;

    private Provider<LastViewedPatientsViewModel> lastViewedPatientsViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<LogsViewModel> logsViewModelProvider;

    private Provider<MatchingPatientsViewModel> matchingPatientsViewModelProvider;

    private Provider<PatientDashboardAllergyViewModel> patientDashboardAllergyViewModelProvider;

    private Provider<PatientDashboardChartsViewModel> patientDashboardChartsViewModelProvider;

    private Provider<PatientDashboardDetailsViewModel> patientDashboardDetailsViewModelProvider;

    private Provider<PatientDashboardDiagnosisViewModel> patientDashboardDiagnosisViewModelProvider;

    private Provider<PatientDashboardMainViewModel> patientDashboardMainViewModelProvider;

    private Provider<PatientDashboardVisitsViewModel> patientDashboardVisitsViewModelProvider;

    private Provider<PatientDashboardVitalsViewModel> patientDashboardVitalsViewModelProvider;

    private Provider<ProviderDashboardViewModel> providerDashboardViewModelProvider;

    private Provider<ProviderManagerDashboardViewModel> providerManagerDashboardViewModelProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private Provider<SyncedPatientsViewModel> syncedPatientsViewModelProvider;

    private Provider<VisitDashboardViewModel> visitDashboardViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.savedStateHandle = savedStateHandleParam;
      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.activeVisitsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.addEditAllergyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.addEditPatientViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.addEditProviderViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.contactUsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.dashboardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.formAdmissionViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.formDisplayMainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.formDisplayPageViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.formEntryPatientListViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.formListViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.lastViewedPatientsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.logsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13);
      this.matchingPatientsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 14);
      this.patientDashboardAllergyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 15);
      this.patientDashboardChartsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 16);
      this.patientDashboardDetailsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 17);
      this.patientDashboardDiagnosisViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 18);
      this.patientDashboardMainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 19);
      this.patientDashboardVisitsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 20);
      this.patientDashboardVitalsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 21);
      this.providerDashboardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 22);
      this.providerManagerDashboardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 23);
      this.settingsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 24);
      this.syncedPatientsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 25);
      this.visitDashboardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 26);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(27).put("org.openmrs.mobile.activities.activevisits.ActiveVisitsViewModel", ((Provider) activeVisitsViewModelProvider)).put("org.openmrs.mobile.activities.addeditallergy.AddEditAllergyViewModel", ((Provider) addEditAllergyViewModelProvider)).put("org.openmrs.mobile.activities.addeditpatient.AddEditPatientViewModel", ((Provider) addEditPatientViewModelProvider)).put("org.openmrs.mobile.activities.addeditprovider.AddEditProviderViewModel", ((Provider) addEditProviderViewModelProvider)).put("org.openmrs.mobile.activities.community.contact.ContactUsViewModel", ((Provider) contactUsViewModelProvider)).put("org.openmrs.mobile.activities.dashboard.DashboardViewModel", ((Provider) dashboardViewModelProvider)).put("org.openmrs.mobile.activities.formadmission.FormAdmissionViewModel", ((Provider) formAdmissionViewModelProvider)).put("org.openmrs.mobile.activities.formdisplay.FormDisplayMainViewModel", ((Provider) formDisplayMainViewModelProvider)).put("org.openmrs.mobile.activities.formdisplay.FormDisplayPageViewModel", ((Provider) formDisplayPageViewModelProvider)).put("org.openmrs.mobile.activities.formentrypatientlist.FormEntryPatientListViewModel", ((Provider) formEntryPatientListViewModelProvider)).put("org.openmrs.mobile.activities.formlist.FormListViewModel", ((Provider) formListViewModelProvider)).put("org.openmrs.mobile.activities.lastviewedpatients.LastViewedPatientsViewModel", ((Provider) lastViewedPatientsViewModelProvider)).put("org.openmrs.mobile.activities.login.LoginViewModel", ((Provider) loginViewModelProvider)).put("org.openmrs.mobile.activities.logs.LogsViewModel", ((Provider) logsViewModelProvider)).put("org.openmrs.mobile.activities.matchingpatients.MatchingPatientsViewModel", ((Provider) matchingPatientsViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.allergy.PatientDashboardAllergyViewModel", ((Provider) patientDashboardAllergyViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.charts.PatientDashboardChartsViewModel", ((Provider) patientDashboardChartsViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.details.PatientDashboardDetailsViewModel", ((Provider) patientDashboardDetailsViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.diagnosis.PatientDashboardDiagnosisViewModel", ((Provider) patientDashboardDiagnosisViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.PatientDashboardMainViewModel", ((Provider) patientDashboardMainViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.visits.PatientDashboardVisitsViewModel", ((Provider) patientDashboardVisitsViewModelProvider)).put("org.openmrs.mobile.activities.patientdashboard.vitals.PatientDashboardVitalsViewModel", ((Provider) patientDashboardVitalsViewModelProvider)).put("org.openmrs.mobile.activities.providerdashboard.ProviderDashboardViewModel", ((Provider) providerDashboardViewModelProvider)).put("org.openmrs.mobile.activities.providermanagerdashboard.ProviderManagerDashboardViewModel", ((Provider) providerManagerDashboardViewModelProvider)).put("org.openmrs.mobile.activities.settings.SettingsViewModel", ((Provider) settingsViewModelProvider)).put("org.openmrs.mobile.activities.syncedpatients.SyncedPatientsViewModel", ((Provider) syncedPatientsViewModelProvider)).put("org.openmrs.mobile.activities.visitdashboard.VisitDashboardViewModel", ((Provider) visitDashboardViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // org.openmrs.mobile.activities.activevisits.ActiveVisitsViewModel 
          return (T) new ActiveVisitsViewModel(singletonCImpl.visitDAOProvider.get());

          case 1: // org.openmrs.mobile.activities.addeditallergy.AddEditAllergyViewModel 
          return (T) new AddEditAllergyViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.conceptRepositoryProvider.get(), singletonCImpl.allergyRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 2: // org.openmrs.mobile.activities.addeditpatient.AddEditPatientViewModel 
          return (T) new AddEditPatientViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.patientRepositoryProvider.get(), singletonCImpl.conceptRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 3: // org.openmrs.mobile.activities.addeditprovider.AddEditProviderViewModel 
          return (T) new AddEditProviderViewModel(singletonCImpl.providerRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 4: // org.openmrs.mobile.activities.community.contact.ContactUsViewModel 
          return (T) new ContactUsViewModel();

          case 5: // org.openmrs.mobile.activities.dashboard.DashboardViewModel 
          return (T) new DashboardViewModel();

          case 6: // org.openmrs.mobile.activities.formadmission.FormAdmissionViewModel 
          return (T) new FormAdmissionViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.formRepositoryProvider.get(), singletonCImpl.encounterRepositoryProvider.get(), singletonCImpl.providerRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 7: // org.openmrs.mobile.activities.formdisplay.FormDisplayMainViewModel 
          return (T) new FormDisplayMainViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.formRepositoryProvider.get(), singletonCImpl.encounterRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 8: // org.openmrs.mobile.activities.formdisplay.FormDisplayPageViewModel 
          return (T) new FormDisplayPageViewModel(viewModelCImpl.savedStateHandle);

          case 9: // org.openmrs.mobile.activities.formentrypatientlist.FormEntryPatientListViewModel 
          return (T) new FormEntryPatientListViewModel(singletonCImpl.visitDAOProvider.get());

          case 10: // org.openmrs.mobile.activities.formlist.FormListViewModel 
          return (T) new FormListViewModel(singletonCImpl.encounterDAOProvider.get(), singletonCImpl.formRepositoryProvider.get());

          case 11: // org.openmrs.mobile.activities.lastviewedpatients.LastViewedPatientsViewModel 
          return (T) new LastViewedPatientsViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.patientRepositoryProvider.get());

          case 12: // org.openmrs.mobile.activities.login.LoginViewModel 
          return (T) new LoginViewModel(singletonCImpl.loginRepositoryProvider.get(), singletonCImpl.visitRepositoryProvider.get(), singletonCImpl.locationRepositoryProvider.get(), singletonCImpl.locationDAOProvider.get(), singletonCImpl.userServiceProvider.get());

          case 13: // org.openmrs.mobile.activities.logs.LogsViewModel 
          return (T) new LogsViewModel(singletonCImpl.provideLoggerProvider.get());

          case 14: // org.openmrs.mobile.activities.matchingpatients.MatchingPatientsViewModel 
          return (T) new MatchingPatientsViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.patientRepositoryProvider.get());

          case 15: // org.openmrs.mobile.activities.patientdashboard.allergy.PatientDashboardAllergyViewModel 
          return (T) new PatientDashboardAllergyViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.allergyRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 16: // org.openmrs.mobile.activities.patientdashboard.charts.PatientDashboardChartsViewModel 
          return (T) new PatientDashboardChartsViewModel(singletonCImpl.visitDAOProvider.get(), viewModelCImpl.savedStateHandle);

          case 17: // org.openmrs.mobile.activities.patientdashboard.details.PatientDashboardDetailsViewModel 
          return (T) new PatientDashboardDetailsViewModel(singletonCImpl.patientDAOProvider.get(), viewModelCImpl.savedStateHandle);

          case 18: // org.openmrs.mobile.activities.patientdashboard.diagnosis.PatientDashboardDiagnosisViewModel 
          return (T) new PatientDashboardDiagnosisViewModel(singletonCImpl.encounterDAOProvider.get(), viewModelCImpl.savedStateHandle);

          case 19: // org.openmrs.mobile.activities.patientdashboard.PatientDashboardMainViewModel 
          return (T) new PatientDashboardMainViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.visitDAOProvider.get(), singletonCImpl.patientRepositoryProvider.get(), singletonCImpl.visitRepositoryProvider.get(), singletonCImpl.allergyRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 20: // org.openmrs.mobile.activities.patientdashboard.visits.PatientDashboardVisitsViewModel 
          return (T) new PatientDashboardVisitsViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.visitDAOProvider.get(), singletonCImpl.visitRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 21: // org.openmrs.mobile.activities.patientdashboard.vitals.PatientDashboardVitalsViewModel 
          return (T) new PatientDashboardVitalsViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.encounterDAOProvider.get(), viewModelCImpl.savedStateHandle);

          case 22: // org.openmrs.mobile.activities.providerdashboard.ProviderDashboardViewModel 
          return (T) new ProviderDashboardViewModel(singletonCImpl.providerRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          case 23: // org.openmrs.mobile.activities.providermanagerdashboard.ProviderManagerDashboardViewModel 
          return (T) new ProviderManagerDashboardViewModel(singletonCImpl.providerRepositoryProvider.get());

          case 24: // org.openmrs.mobile.activities.settings.SettingsViewModel 
          return (T) new SettingsViewModel(singletonCImpl.conceptRepositoryProvider.get(), singletonCImpl.provideLoggerProvider.get());

          case 25: // org.openmrs.mobile.activities.syncedpatients.SyncedPatientsViewModel 
          return (T) new SyncedPatientsViewModel(singletonCImpl.patientDAOProvider.get(), singletonCImpl.visitDAOProvider.get());

          case 26: // org.openmrs.mobile.activities.visitdashboard.VisitDashboardViewModel 
          return (T) new VisitDashboardViewModel(singletonCImpl.visitDAOProvider.get(), singletonCImpl.visitRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends OpenMRS_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends OpenMRS_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }

    @Override
    public void injectConceptDownloadService(ConceptDownloadService arg0) {
      injectConceptDownloadService2(arg0);
    }

    @Override
    public void injectEncounterService(EncounterService arg0) {
      injectEncounterService2(arg0);
    }

    @Override
    public void injectFormListService(FormListService arg0) {
      injectFormListService2(arg0);
    }

    @Override
    public void injectPatientService(PatientService arg0) {
      injectPatientService2(arg0);
    }

    @CanIgnoreReturnValue
    private ConceptDownloadService injectConceptDownloadService2(ConceptDownloadService instance) {
      ConceptDownloadService_MembersInjector.injectService(instance, singletonCImpl.provideRestServiceProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private EncounterService injectEncounterService2(EncounterService instance) {
      EncounterService_MembersInjector.injectEncounterRepository(instance, singletonCImpl.encounterRepositoryProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private FormListService injectFormListService2(FormListService instance) {
      FormListService_MembersInjector.injectApiService(instance, singletonCImpl.provideRestServiceProvider.get());
      FormListService_MembersInjector.injectAppDatabase(instance, singletonCImpl.provideAppDatabaseProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private PatientService injectPatientService2(PatientService instance) {
      PatientService_MembersInjector.injectPatientRepository(instance, singletonCImpl.patientRepositoryProvider.get());
      PatientService_MembersInjector.injectRestApi(instance, singletonCImpl.provideRestServiceProvider.get());
      return instance;
    }
  }

  private static final class SingletonCImpl extends OpenMRS_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<RestApi> provideRestServiceProvider;

    private Provider<AppDatabase> provideAppDatabaseProvider;

    private Provider<WorkManager> provideWorkManagerProvider;

    private Provider<OpenMRSLogger> provideLoggerProvider;

    private Provider<FormRepository> formRepositoryProvider;

    private Provider<PatientDAO> patientDAOProvider;

    private Provider<LocationRepository> locationRepositoryProvider;

    private Provider<VisitDAO> visitDAOProvider;

    private Provider<EncounterDAO> encounterDAOProvider;

    private Provider<LocationDAO> locationDAOProvider;

    private Provider<VisitRepository> visitRepositoryProvider;

    private Provider<EncounterRepository> encounterRepositoryProvider;

    private Provider<PatientRepository> patientRepositoryProvider;

    private Provider<ProviderRoomDAO> provideProviderRoomDAOProvider;

    private Provider<AddProviderWorker_AssistedFactory> addProviderWorker_AssistedFactoryProvider;

    private Provider<AllergyRoomDAO> provideAllergyRoomDAOProvider;

    private Provider<DeleteAllergyWorker_AssistedFactory> deleteAllergyWorker_AssistedFactoryProvider;

    private Provider<DeleteProviderWorker_AssistedFactory> deleteProviderWorker_AssistedFactoryProvider;

    private Provider<UpdatePatientWorker_AssistedFactory> updatePatientWorker_AssistedFactoryProvider;

    private Provider<UpdateProviderWorker_AssistedFactory> updateProviderWorker_AssistedFactoryProvider;

    private Provider<Context> provideApplicationContextProvider;

    private Provider<ConceptRoomDAO> provideConceptRoomDAOProvider;

    private Provider<ConceptRepository> conceptRepositoryProvider;

    private Provider<AllergyRepository> allergyRepositoryProvider;

    private Provider<ProviderRepository> providerRepositoryProvider;

    private Provider<LoginRepository> loginRepositoryProvider;

    private Provider<UserService> userServiceProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private Map<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>> mapOfStringAndProviderOfWorkerAssistedFactoryOf(
        ) {
      return ImmutableMap.<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>>of("com.openmrs.android_sdk.library.api.workers.provider.AddProviderWorker", ((Provider) addProviderWorker_AssistedFactoryProvider), "com.openmrs.android_sdk.library.api.workers.allergy.DeleteAllergyWorker", ((Provider) deleteAllergyWorker_AssistedFactoryProvider), "com.openmrs.android_sdk.library.api.workers.provider.DeleteProviderWorker", ((Provider) deleteProviderWorker_AssistedFactoryProvider), "com.openmrs.android_sdk.library.api.workers.UpdatePatientWorker", ((Provider) updatePatientWorker_AssistedFactoryProvider), "com.openmrs.android_sdk.library.api.workers.provider.UpdateProviderWorker", ((Provider) updateProviderWorker_AssistedFactoryProvider));
    }

    private HiltWorkerFactory hiltWorkerFactory() {
      return WorkerFactoryModule_ProvideFactoryFactory.provideFactory(mapOfStringAndProviderOfWorkerAssistedFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideRestServiceProvider = DoubleCheck.provider(new SwitchingProvider<RestApi>(singletonCImpl, 1));
      this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 2));
      this.provideWorkManagerProvider = DoubleCheck.provider(new SwitchingProvider<WorkManager>(singletonCImpl, 3));
      this.provideLoggerProvider = DoubleCheck.provider(new SwitchingProvider<OpenMRSLogger>(singletonCImpl, 4));
      this.formRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<FormRepository>(singletonCImpl, 0));
      this.patientDAOProvider = DoubleCheck.provider(new SwitchingProvider<PatientDAO>(singletonCImpl, 6));
      this.locationRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LocationRepository>(singletonCImpl, 7));
      this.visitDAOProvider = DoubleCheck.provider(new SwitchingProvider<VisitDAO>(singletonCImpl, 10));
      this.encounterDAOProvider = DoubleCheck.provider(new SwitchingProvider<EncounterDAO>(singletonCImpl, 11));
      this.locationDAOProvider = DoubleCheck.provider(new SwitchingProvider<LocationDAO>(singletonCImpl, 12));
      this.visitRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<VisitRepository>(singletonCImpl, 9));
      this.encounterRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<EncounterRepository>(singletonCImpl, 8));
      this.patientRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PatientRepository>(singletonCImpl, 5));
      this.provideProviderRoomDAOProvider = DoubleCheck.provider(new SwitchingProvider<ProviderRoomDAO>(singletonCImpl, 14));
      this.addProviderWorker_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<AddProviderWorker_AssistedFactory>(singletonCImpl, 13));
      this.provideAllergyRoomDAOProvider = DoubleCheck.provider(new SwitchingProvider<AllergyRoomDAO>(singletonCImpl, 16));
      this.deleteAllergyWorker_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<DeleteAllergyWorker_AssistedFactory>(singletonCImpl, 15));
      this.deleteProviderWorker_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<DeleteProviderWorker_AssistedFactory>(singletonCImpl, 17));
      this.updatePatientWorker_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<UpdatePatientWorker_AssistedFactory>(singletonCImpl, 18));
      this.updateProviderWorker_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<UpdateProviderWorker_AssistedFactory>(singletonCImpl, 19));
      this.provideApplicationContextProvider = DoubleCheck.provider(new SwitchingProvider<Context>(singletonCImpl, 20));
      this.provideConceptRoomDAOProvider = DoubleCheck.provider(new SwitchingProvider<ConceptRoomDAO>(singletonCImpl, 22));
      this.conceptRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ConceptRepository>(singletonCImpl, 21));
      this.allergyRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AllergyRepository>(singletonCImpl, 23));
      this.providerRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ProviderRepository>(singletonCImpl, 24));
      this.loginRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LoginRepository>(singletonCImpl, 25));
      this.userServiceProvider = DoubleCheck.provider(new SwitchingProvider<UserService>(singletonCImpl, 26));
    }

    @Override
    public FormRepository provideFormRepository() {
      return formRepositoryProvider.get();
    }

    @Override
    public PatientRepository providePatientRepository() {
      return patientRepositoryProvider.get();
    }

    @Override
    public VisitRepository provideVisitRepository() {
      return visitRepositoryProvider.get();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectOpenMRS(OpenMRS arg0) {
      injectOpenMRS2(arg0);
    }

    @CanIgnoreReturnValue
    private FormRepository injectFormRepository(FormRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private LocationRepository injectLocationRepository(LocationRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private VisitRepository injectVisitRepository(VisitRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private EncounterRepository injectEncounterRepository(EncounterRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private PatientRepository injectPatientRepository(PatientRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private OpenMRS injectOpenMRS2(OpenMRS instance) {
      OpenMRS_MembersInjector.injectMLogger(instance, provideLoggerProvider.get());
      OpenMRS_MembersInjector.injectWorkerFactory(instance, hiltWorkerFactory());
      return instance;
    }

    @CanIgnoreReturnValue
    private ConceptRepository injectConceptRepository(ConceptRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private AllergyRepository injectAllergyRepository(AllergyRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ProviderRepository injectProviderRepository(ProviderRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private LoginRepository injectLoginRepository(LoginRepository instance) {
      BaseRepository_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
      BaseRepository_MembersInjector.injectRestApi(instance, provideRestServiceProvider.get());
      BaseRepository_MembersInjector.injectDb(instance, provideAppDatabaseProvider.get());
      BaseRepository_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
      BaseRepository_MembersInjector.injectLogger(instance, provideLoggerProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.openmrs.android_sdk.library.api.repository.FormRepository 
          return (T) singletonCImpl.injectFormRepository(FormRepository_Factory.newInstance());

          case 1: // com.openmrs.android_sdk.library.api.RestApi 
          return (T) RestServiceModule_ProvideRestServiceFactory.provideRestService();

          case 2: // com.openmrs.android_sdk.library.databases.AppDatabase 
          return (T) AppDatabaseModule_ProvideAppDatabaseFactory.provideAppDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // androidx.work.WorkManager 
          return (T) WorkManagerModule_ProvideWorkManagerFactory.provideWorkManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 4: // com.openmrs.android_sdk.library.OpenMRSLogger 
          return (T) OpenMRSLoggerModule_ProvideLoggerFactory.provideLogger();

          case 5: // com.openmrs.android_sdk.library.api.repository.PatientRepository 
          return (T) singletonCImpl.injectPatientRepository(PatientRepository_Factory.newInstance(singletonCImpl.patientDAOProvider.get(), singletonCImpl.locationRepositoryProvider.get(), singletonCImpl.encounterRepositoryProvider.get()));

          case 6: // com.openmrs.android_sdk.library.dao.PatientDAO 
          return (T) new PatientDAO();

          case 7: // com.openmrs.android_sdk.library.api.repository.LocationRepository 
          return (T) singletonCImpl.injectLocationRepository(LocationRepository_Factory.newInstance());

          case 8: // com.openmrs.android_sdk.library.api.repository.EncounterRepository 
          return (T) singletonCImpl.injectEncounterRepository(EncounterRepository_Factory.newInstance(singletonCImpl.visitRepositoryProvider.get()));

          case 9: // com.openmrs.android_sdk.library.api.repository.VisitRepository 
          return (T) singletonCImpl.injectVisitRepository(VisitRepository_Factory.newInstance(singletonCImpl.visitDAOProvider.get(), singletonCImpl.encounterDAOProvider.get(), singletonCImpl.locationDAOProvider.get()));

          case 10: // com.openmrs.android_sdk.library.dao.VisitDAO 
          return (T) new VisitDAO();

          case 11: // com.openmrs.android_sdk.library.dao.EncounterDAO 
          return (T) new EncounterDAO();

          case 12: // com.openmrs.android_sdk.library.dao.LocationDAO 
          return (T) new LocationDAO();

          case 13: // com.openmrs.android_sdk.library.api.workers.provider.AddProviderWorker_AssistedFactory 
          return (T) new AddProviderWorker_AssistedFactory() {
            @Override
            public AddProviderWorker create(Context context, WorkerParameters workerParams) {
              return new AddProviderWorker(context, workerParams, singletonCImpl.provideProviderRoomDAOProvider.get(), singletonCImpl.provideRestServiceProvider.get());
            }
          };

          case 14: // com.openmrs.android_sdk.library.dao.ProviderRoomDAO 
          return (T) AppDatabaseModule_ProvideProviderRoomDAOFactory.provideProviderRoomDAO(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 15: // com.openmrs.android_sdk.library.api.workers.allergy.DeleteAllergyWorker_AssistedFactory 
          return (T) new DeleteAllergyWorker_AssistedFactory() {
            @Override
            public DeleteAllergyWorker create(Context context2, WorkerParameters workerParams2) {
              return new DeleteAllergyWorker(context2, workerParams2, singletonCImpl.provideAllergyRoomDAOProvider.get(), singletonCImpl.provideRestServiceProvider.get());
            }
          };

          case 16: // com.openmrs.android_sdk.library.dao.AllergyRoomDAO 
          return (T) AppDatabaseModule_ProvideAllergyRoomDAOFactory.provideAllergyRoomDAO(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 17: // com.openmrs.android_sdk.library.api.workers.provider.DeleteProviderWorker_AssistedFactory 
          return (T) new DeleteProviderWorker_AssistedFactory() {
            @Override
            public DeleteProviderWorker create(Context context3, WorkerParameters workerParams3) {
              return new DeleteProviderWorker(context3, workerParams3, singletonCImpl.provideProviderRoomDAOProvider.get(), singletonCImpl.provideRestServiceProvider.get());
            }
          };

          case 18: // com.openmrs.android_sdk.library.api.workers.UpdatePatientWorker_AssistedFactory 
          return (T) new UpdatePatientWorker_AssistedFactory() {
            @Override
            public UpdatePatientWorker create(Context appContext, WorkerParameters workerParams4) {
              return new UpdatePatientWorker(appContext, workerParams4, singletonCImpl.provideRestServiceProvider.get(), singletonCImpl.patientDAOProvider.get(), singletonCImpl.provideLoggerProvider.get());
            }
          };

          case 19: // com.openmrs.android_sdk.library.api.workers.provider.UpdateProviderWorker_AssistedFactory 
          return (T) new UpdateProviderWorker_AssistedFactory() {
            @Override
            public UpdateProviderWorker create(Context context4, WorkerParameters workerParams5) {
              return new UpdateProviderWorker(context4, workerParams5, singletonCImpl.provideProviderRoomDAOProvider.get(), singletonCImpl.provideRestServiceProvider.get());
            }
          };

          case 20: // android.content.Context 
          return (T) ApplicationContextModule_ProvideApplicationContextFactory.provideApplicationContext();

          case 21: // com.openmrs.android_sdk.library.api.repository.ConceptRepository 
          return (T) singletonCImpl.injectConceptRepository(ConceptRepository_Factory.newInstance(singletonCImpl.provideConceptRoomDAOProvider.get()));

          case 22: // com.openmrs.android_sdk.library.dao.ConceptRoomDAO 
          return (T) AppDatabaseModule_ProvideConceptRoomDAOFactory.provideConceptRoomDAO(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 23: // com.openmrs.android_sdk.library.api.repository.AllergyRepository 
          return (T) singletonCImpl.injectAllergyRepository(AllergyRepository_Factory.newInstance(singletonCImpl.provideAllergyRoomDAOProvider.get()));

          case 24: // com.openmrs.android_sdk.library.api.repository.ProviderRepository 
          return (T) singletonCImpl.injectProviderRepository(ProviderRepository_Factory.newInstance(singletonCImpl.provideProviderRoomDAOProvider.get()));

          case 25: // com.openmrs.android_sdk.library.api.repository.LoginRepository 
          return (T) singletonCImpl.injectLoginRepository(LoginRepository_Factory.newInstance());

          case 26: // org.openmrs.mobile.services.UserService 
          return (T) new UserService(singletonCImpl.provideRestServiceProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
