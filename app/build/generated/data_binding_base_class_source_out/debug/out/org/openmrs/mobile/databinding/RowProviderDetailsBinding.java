// Generated by view binder compiler. Do not edit!
package org.openmrs.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openmrs.mobile.R;

public final class RowProviderDetailsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout providerManagementCL;

  @NonNull
  public final TextView providerManagementIdentifier;

  @NonNull
  public final TextView providerManagementName;

  private RowProviderDetailsBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout providerManagementCL,
      @NonNull TextView providerManagementIdentifier, @NonNull TextView providerManagementName) {
    this.rootView = rootView;
    this.providerManagementCL = providerManagementCL;
    this.providerManagementIdentifier = providerManagementIdentifier;
    this.providerManagementName = providerManagementName;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RowProviderDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowProviderDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_provider_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowProviderDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout providerManagementCL = (ConstraintLayout) rootView;

      id = R.id.providerManagementIdentifier;
      TextView providerManagementIdentifier = rootView.findViewById(id);
      if (providerManagementIdentifier == null) {
        break missingId;
      }

      id = R.id.providerManagementName;
      TextView providerManagementName = rootView.findViewById(id);
      if (providerManagementName == null) {
        break missingId;
      }

      return new RowProviderDetailsBinding((ConstraintLayout) rootView, providerManagementCL,
          providerManagementIdentifier, providerManagementName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
