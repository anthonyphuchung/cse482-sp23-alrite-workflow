// Generated by view binder compiler. Do not edit!
package org.openmrs.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openmrs.mobile.R;

public final class FragmentMatchingPatientsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView addr1Hint;

  @NonNull
  public final View addr1Separator;

  @NonNull
  public final TextView addr2Hint;

  @NonNull
  public final View addr2Separator;

  @NonNull
  public final TextView address1;

  @NonNull
  public final TextView address2;

  @NonNull
  public final TextView birthDate;

  @NonNull
  public final LinearLayout buttons;

  @NonNull
  public final TextView cityAutoComplete;

  @NonNull
  public final TextView cityHint;

  @NonNull
  public final View citySeparator;

  @NonNull
  public final CardView containerPatientInfoCv;

  @NonNull
  public final TextView country;

  @NonNull
  public final TextView countryHint;

  @NonNull
  public final View countrySeparator;

  @NonNull
  public final TextView familyName;

  @NonNull
  public final TextView gender;

  @NonNull
  public final TextView givenName;

  @NonNull
  public final Button mergePatientsButton;

  @NonNull
  public final TextView middleName;

  @NonNull
  public final LinearLayout newPatientHint;

  @NonNull
  public final LinearLayout patientInfo;

  @NonNull
  public final TextView postalCode;

  @NonNull
  public final TextView postalCodeHint;

  @NonNull
  public final View postalCodeSeparator;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final Button registerNewPatientButton;

  @NonNull
  public final LinearLayout similarPatientsHint;

  @NonNull
  public final TextView stateAutoComplete;

  @NonNull
  public final TextView stateHint;

  @NonNull
  public final View stateSeparator;

  private FragmentMatchingPatientsBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView addr1Hint, @NonNull View addr1Separator, @NonNull TextView addr2Hint,
      @NonNull View addr2Separator, @NonNull TextView address1, @NonNull TextView address2,
      @NonNull TextView birthDate, @NonNull LinearLayout buttons,
      @NonNull TextView cityAutoComplete, @NonNull TextView cityHint, @NonNull View citySeparator,
      @NonNull CardView containerPatientInfoCv, @NonNull TextView country,
      @NonNull TextView countryHint, @NonNull View countrySeparator, @NonNull TextView familyName,
      @NonNull TextView gender, @NonNull TextView givenName, @NonNull Button mergePatientsButton,
      @NonNull TextView middleName, @NonNull LinearLayout newPatientHint,
      @NonNull LinearLayout patientInfo, @NonNull TextView postalCode,
      @NonNull TextView postalCodeHint, @NonNull View postalCodeSeparator,
      @NonNull RecyclerView recyclerView, @NonNull Button registerNewPatientButton,
      @NonNull LinearLayout similarPatientsHint, @NonNull TextView stateAutoComplete,
      @NonNull TextView stateHint, @NonNull View stateSeparator) {
    this.rootView = rootView;
    this.addr1Hint = addr1Hint;
    this.addr1Separator = addr1Separator;
    this.addr2Hint = addr2Hint;
    this.addr2Separator = addr2Separator;
    this.address1 = address1;
    this.address2 = address2;
    this.birthDate = birthDate;
    this.buttons = buttons;
    this.cityAutoComplete = cityAutoComplete;
    this.cityHint = cityHint;
    this.citySeparator = citySeparator;
    this.containerPatientInfoCv = containerPatientInfoCv;
    this.country = country;
    this.countryHint = countryHint;
    this.countrySeparator = countrySeparator;
    this.familyName = familyName;
    this.gender = gender;
    this.givenName = givenName;
    this.mergePatientsButton = mergePatientsButton;
    this.middleName = middleName;
    this.newPatientHint = newPatientHint;
    this.patientInfo = patientInfo;
    this.postalCode = postalCode;
    this.postalCodeHint = postalCodeHint;
    this.postalCodeSeparator = postalCodeSeparator;
    this.recyclerView = recyclerView;
    this.registerNewPatientButton = registerNewPatientButton;
    this.similarPatientsHint = similarPatientsHint;
    this.stateAutoComplete = stateAutoComplete;
    this.stateHint = stateHint;
    this.stateSeparator = stateSeparator;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMatchingPatientsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMatchingPatientsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_matching_patients, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMatchingPatientsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addr1Hint;
      TextView addr1Hint = rootView.findViewById(id);
      if (addr1Hint == null) {
        break missingId;
      }

      id = R.id.addr1Separator;
      View addr1Separator = rootView.findViewById(id);
      if (addr1Separator == null) {
        break missingId;
      }

      id = R.id.addr2Hint;
      TextView addr2Hint = rootView.findViewById(id);
      if (addr2Hint == null) {
        break missingId;
      }

      id = R.id.addr2Separator;
      View addr2Separator = rootView.findViewById(id);
      if (addr2Separator == null) {
        break missingId;
      }

      id = R.id.address1;
      TextView address1 = rootView.findViewById(id);
      if (address1 == null) {
        break missingId;
      }

      id = R.id.address2;
      TextView address2 = rootView.findViewById(id);
      if (address2 == null) {
        break missingId;
      }

      id = R.id.birthDate;
      TextView birthDate = rootView.findViewById(id);
      if (birthDate == null) {
        break missingId;
      }

      id = R.id.buttons;
      LinearLayout buttons = rootView.findViewById(id);
      if (buttons == null) {
        break missingId;
      }

      id = R.id.cityAutoComplete;
      TextView cityAutoComplete = rootView.findViewById(id);
      if (cityAutoComplete == null) {
        break missingId;
      }

      id = R.id.cityHint;
      TextView cityHint = rootView.findViewById(id);
      if (cityHint == null) {
        break missingId;
      }

      id = R.id.citySeparator;
      View citySeparator = rootView.findViewById(id);
      if (citySeparator == null) {
        break missingId;
      }

      id = R.id.container_patient_info_cv;
      CardView containerPatientInfoCv = rootView.findViewById(id);
      if (containerPatientInfoCv == null) {
        break missingId;
      }

      id = R.id.country;
      TextView country = rootView.findViewById(id);
      if (country == null) {
        break missingId;
      }

      id = R.id.countryHint;
      TextView countryHint = rootView.findViewById(id);
      if (countryHint == null) {
        break missingId;
      }

      id = R.id.countrySeparator;
      View countrySeparator = rootView.findViewById(id);
      if (countrySeparator == null) {
        break missingId;
      }

      id = R.id.familyName;
      TextView familyName = rootView.findViewById(id);
      if (familyName == null) {
        break missingId;
      }

      id = R.id.gender;
      TextView gender = rootView.findViewById(id);
      if (gender == null) {
        break missingId;
      }

      id = R.id.givenName;
      TextView givenName = rootView.findViewById(id);
      if (givenName == null) {
        break missingId;
      }

      id = R.id.mergePatientsButton;
      Button mergePatientsButton = rootView.findViewById(id);
      if (mergePatientsButton == null) {
        break missingId;
      }

      id = R.id.middleName;
      TextView middleName = rootView.findViewById(id);
      if (middleName == null) {
        break missingId;
      }

      id = R.id.newPatientHint;
      LinearLayout newPatientHint = rootView.findViewById(id);
      if (newPatientHint == null) {
        break missingId;
      }

      id = R.id.patientInfo;
      LinearLayout patientInfo = rootView.findViewById(id);
      if (patientInfo == null) {
        break missingId;
      }

      id = R.id.postalCode;
      TextView postalCode = rootView.findViewById(id);
      if (postalCode == null) {
        break missingId;
      }

      id = R.id.postalCodeHint;
      TextView postalCodeHint = rootView.findViewById(id);
      if (postalCodeHint == null) {
        break missingId;
      }

      id = R.id.postalCodeSeparator;
      View postalCodeSeparator = rootView.findViewById(id);
      if (postalCodeSeparator == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = rootView.findViewById(id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.registerNewPatientButton;
      Button registerNewPatientButton = rootView.findViewById(id);
      if (registerNewPatientButton == null) {
        break missingId;
      }

      id = R.id.similarPatientsHint;
      LinearLayout similarPatientsHint = rootView.findViewById(id);
      if (similarPatientsHint == null) {
        break missingId;
      }

      id = R.id.stateAutoComplete;
      TextView stateAutoComplete = rootView.findViewById(id);
      if (stateAutoComplete == null) {
        break missingId;
      }

      id = R.id.stateHint;
      TextView stateHint = rootView.findViewById(id);
      if (stateHint == null) {
        break missingId;
      }

      id = R.id.stateSeparator;
      View stateSeparator = rootView.findViewById(id);
      if (stateSeparator == null) {
        break missingId;
      }

      return new FragmentMatchingPatientsBinding((RelativeLayout) rootView, addr1Hint,
          addr1Separator, addr2Hint, addr2Separator, address1, address2, birthDate, buttons,
          cityAutoComplete, cityHint, citySeparator, containerPatientInfoCv, country, countryHint,
          countrySeparator, familyName, gender, givenName, mergePatientsButton, middleName,
          newPatientHint, patientInfo, postalCode, postalCodeHint, postalCodeSeparator,
          recyclerView, registerNewPatientButton, similarPatientsHint, stateAutoComplete, stateHint,
          stateSeparator);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
