// Generated by view binder compiler. Do not edit!
package org.openmrs.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openmrs.mobile.R;

public final class RowFindLastViewedPatientsBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final LinearLayout lastViewedBottomRow;

  @NonNull
  public final TextView lastViewedPatientAge;

  @NonNull
  public final TextView lastViewedPatientBirthDate;

  @NonNull
  public final TextView lastViewedPatientDisplayName;

  @NonNull
  public final TextView lastViewedPatientGender;

  @NonNull
  public final TextView lastViewedPatientIdentifier;

  @NonNull
  public final RelativeLayout lastViewedTopRow;

  @NonNull
  public final CheckBox offlineCheckbox;

  private RowFindLastViewedPatientsBinding(@NonNull CardView rootView,
      @NonNull LinearLayout lastViewedBottomRow, @NonNull TextView lastViewedPatientAge,
      @NonNull TextView lastViewedPatientBirthDate, @NonNull TextView lastViewedPatientDisplayName,
      @NonNull TextView lastViewedPatientGender, @NonNull TextView lastViewedPatientIdentifier,
      @NonNull RelativeLayout lastViewedTopRow, @NonNull CheckBox offlineCheckbox) {
    this.rootView = rootView;
    this.lastViewedBottomRow = lastViewedBottomRow;
    this.lastViewedPatientAge = lastViewedPatientAge;
    this.lastViewedPatientBirthDate = lastViewedPatientBirthDate;
    this.lastViewedPatientDisplayName = lastViewedPatientDisplayName;
    this.lastViewedPatientGender = lastViewedPatientGender;
    this.lastViewedPatientIdentifier = lastViewedPatientIdentifier;
    this.lastViewedTopRow = lastViewedTopRow;
    this.offlineCheckbox = offlineCheckbox;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static RowFindLastViewedPatientsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowFindLastViewedPatientsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_find_last_viewed_patients, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowFindLastViewedPatientsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.lastViewedBottomRow;
      LinearLayout lastViewedBottomRow = rootView.findViewById(id);
      if (lastViewedBottomRow == null) {
        break missingId;
      }

      id = R.id.lastViewedPatientAge;
      TextView lastViewedPatientAge = rootView.findViewById(id);
      if (lastViewedPatientAge == null) {
        break missingId;
      }

      id = R.id.lastViewedPatientBirthDate;
      TextView lastViewedPatientBirthDate = rootView.findViewById(id);
      if (lastViewedPatientBirthDate == null) {
        break missingId;
      }

      id = R.id.lastViewedPatientDisplayName;
      TextView lastViewedPatientDisplayName = rootView.findViewById(id);
      if (lastViewedPatientDisplayName == null) {
        break missingId;
      }

      id = R.id.lastViewedPatientGender;
      TextView lastViewedPatientGender = rootView.findViewById(id);
      if (lastViewedPatientGender == null) {
        break missingId;
      }

      id = R.id.lastViewedPatientIdentifier;
      TextView lastViewedPatientIdentifier = rootView.findViewById(id);
      if (lastViewedPatientIdentifier == null) {
        break missingId;
      }

      id = R.id.lastViewedTopRow;
      RelativeLayout lastViewedTopRow = rootView.findViewById(id);
      if (lastViewedTopRow == null) {
        break missingId;
      }

      id = R.id.offlineCheckbox;
      CheckBox offlineCheckbox = rootView.findViewById(id);
      if (offlineCheckbox == null) {
        break missingId;
      }

      return new RowFindLastViewedPatientsBinding((CardView) rootView, lastViewedBottomRow,
          lastViewedPatientAge, lastViewedPatientBirthDate, lastViewedPatientDisplayName,
          lastViewedPatientGender, lastViewedPatientIdentifier, lastViewedTopRow, offlineCheckbox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
