// Generated by view binder compiler. Do not edit!
package org.openmrs.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openmrs.mobile.R;

public final class LearnPopupBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView definition;

  @NonNull
  public final LinearLayout disease;

  @NonNull
  public final TextView diseaseName;

  @NonNull
  public final ImageView image;

  @NonNull
  public final CardView imageCard;

  @NonNull
  public final CardView inst;

  @NonNull
  public final CardView learn;

  @NonNull
  public final TextView ok;

  @NonNull
  public final RecyclerView recyclerView2;

  private LearnPopupBinding(@NonNull LinearLayout rootView, @NonNull TextView definition,
      @NonNull LinearLayout disease, @NonNull TextView diseaseName, @NonNull ImageView image,
      @NonNull CardView imageCard, @NonNull CardView inst, @NonNull CardView learn,
      @NonNull TextView ok, @NonNull RecyclerView recyclerView2) {
    this.rootView = rootView;
    this.definition = definition;
    this.disease = disease;
    this.diseaseName = diseaseName;
    this.image = image;
    this.imageCard = imageCard;
    this.inst = inst;
    this.learn = learn;
    this.ok = ok;
    this.recyclerView2 = recyclerView2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LearnPopupBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LearnPopupBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.learn_popup, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LearnPopupBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.definition;
      TextView definition = rootView.findViewById(id);
      if (definition == null) {
        break missingId;
      }

      id = R.id.disease;
      LinearLayout disease = rootView.findViewById(id);
      if (disease == null) {
        break missingId;
      }

      id = R.id.diseaseName;
      TextView diseaseName = rootView.findViewById(id);
      if (diseaseName == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = rootView.findViewById(id);
      if (image == null) {
        break missingId;
      }

      id = R.id.imageCard;
      CardView imageCard = rootView.findViewById(id);
      if (imageCard == null) {
        break missingId;
      }

      id = R.id.inst;
      CardView inst = rootView.findViewById(id);
      if (inst == null) {
        break missingId;
      }

      id = R.id.learn;
      CardView learn = rootView.findViewById(id);
      if (learn == null) {
        break missingId;
      }

      id = R.id.ok;
      TextView ok = rootView.findViewById(id);
      if (ok == null) {
        break missingId;
      }

      id = R.id.recyclerView2;
      RecyclerView recyclerView2 = rootView.findViewById(id);
      if (recyclerView2 == null) {
        break missingId;
      }

      return new LearnPopupBinding((LinearLayout) rootView, definition, disease, diseaseName, image,
          imageCard, inst, learn, ok, recyclerView2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
