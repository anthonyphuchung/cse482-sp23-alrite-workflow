// Generated by view binder compiler. Do not edit!
package org.openmrs.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openmrs.mobile.R;

public final class CustomExpandableFabBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final FloatingActionButton activityDashboardActionFab;

  @NonNull
  public final FloatingActionButton activityDashboardDeleteFab;

  @NonNull
  public final FloatingActionButton activityDashboardUpdateFab;

  @NonNull
  public final LinearLayout customFabDeleteLl;

  @NonNull
  public final LinearLayout customFabUpdateLl;

  private CustomExpandableFabBinding(@NonNull CoordinatorLayout rootView,
      @NonNull FloatingActionButton activityDashboardActionFab,
      @NonNull FloatingActionButton activityDashboardDeleteFab,
      @NonNull FloatingActionButton activityDashboardUpdateFab,
      @NonNull LinearLayout customFabDeleteLl, @NonNull LinearLayout customFabUpdateLl) {
    this.rootView = rootView;
    this.activityDashboardActionFab = activityDashboardActionFab;
    this.activityDashboardDeleteFab = activityDashboardDeleteFab;
    this.activityDashboardUpdateFab = activityDashboardUpdateFab;
    this.customFabDeleteLl = customFabDeleteLl;
    this.customFabUpdateLl = customFabUpdateLl;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomExpandableFabBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomExpandableFabBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_expandable_fab, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomExpandableFabBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activity_dashboard_action_fab;
      FloatingActionButton activityDashboardActionFab = rootView.findViewById(id);
      if (activityDashboardActionFab == null) {
        break missingId;
      }

      id = R.id.activity_dashboard_delete_fab;
      FloatingActionButton activityDashboardDeleteFab = rootView.findViewById(id);
      if (activityDashboardDeleteFab == null) {
        break missingId;
      }

      id = R.id.activity_dashboard_update_fab;
      FloatingActionButton activityDashboardUpdateFab = rootView.findViewById(id);
      if (activityDashboardUpdateFab == null) {
        break missingId;
      }

      id = R.id.custom_fab_delete_ll;
      LinearLayout customFabDeleteLl = rootView.findViewById(id);
      if (customFabDeleteLl == null) {
        break missingId;
      }

      id = R.id.custom_fab_update_ll;
      LinearLayout customFabUpdateLl = rootView.findViewById(id);
      if (customFabUpdateLl == null) {
        break missingId;
      }

      return new CustomExpandableFabBinding((CoordinatorLayout) rootView,
          activityDashboardActionFab, activityDashboardDeleteFab, activityDashboardUpdateFab,
          customFabDeleteLl, customFabUpdateLl);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
