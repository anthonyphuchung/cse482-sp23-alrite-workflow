// Generated by view binder compiler. Do not edit!
package org.openmrs.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openmrs.mobile.R;

public final class AssessmentLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button btnContinue;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final LinearLayout diagnosis;

  @NonNull
  public final LinearLayout linear;

  @NonNull
  public final RecyclerView recyclerView1;

  @NonNull
  public final TextView txtDiagnosis;

  private AssessmentLayoutBinding(@NonNull RelativeLayout rootView, @NonNull Button btnContinue,
      @NonNull Button btnSave, @NonNull LinearLayout diagnosis, @NonNull LinearLayout linear,
      @NonNull RecyclerView recyclerView1, @NonNull TextView txtDiagnosis) {
    this.rootView = rootView;
    this.btnContinue = btnContinue;
    this.btnSave = btnSave;
    this.diagnosis = diagnosis;
    this.linear = linear;
    this.recyclerView1 = recyclerView1;
    this.txtDiagnosis = txtDiagnosis;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AssessmentLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AssessmentLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.assessment_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AssessmentLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnContinue;
      Button btnContinue = rootView.findViewById(id);
      if (btnContinue == null) {
        break missingId;
      }

      id = R.id.btnSave;
      Button btnSave = rootView.findViewById(id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.diagnosis;
      LinearLayout diagnosis = rootView.findViewById(id);
      if (diagnosis == null) {
        break missingId;
      }

      id = R.id.linear;
      LinearLayout linear = rootView.findViewById(id);
      if (linear == null) {
        break missingId;
      }

      id = R.id.recyclerView1;
      RecyclerView recyclerView1 = rootView.findViewById(id);
      if (recyclerView1 == null) {
        break missingId;
      }

      id = R.id.txtDiagnosis;
      TextView txtDiagnosis = rootView.findViewById(id);
      if (txtDiagnosis == null) {
        break missingId;
      }

      return new AssessmentLayoutBinding((RelativeLayout) rootView, btnContinue, btnSave, diagnosis,
          linear, recyclerView1, txtDiagnosis);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
