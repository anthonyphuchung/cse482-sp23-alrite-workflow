// Generated by Dagger (https://dagger.dev).
package org.openmrs.mobile.activities.login;

import com.openmrs.android_sdk.library.api.repository.LocationRepository;
import com.openmrs.android_sdk.library.api.repository.LoginRepository;
import com.openmrs.android_sdk.library.api.repository.VisitRepository;
import com.openmrs.android_sdk.library.dao.LocationDAO;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.openmrs.mobile.services.UserService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<LoginRepository> loginRepositoryProvider;

  private final Provider<VisitRepository> visitRepositoryProvider;

  private final Provider<LocationRepository> locationRepositoryProvider;

  private final Provider<LocationDAO> locationDAOProvider;

  private final Provider<UserService> userServiceProvider;

  public LoginViewModel_Factory(Provider<LoginRepository> loginRepositoryProvider,
      Provider<VisitRepository> visitRepositoryProvider,
      Provider<LocationRepository> locationRepositoryProvider,
      Provider<LocationDAO> locationDAOProvider, Provider<UserService> userServiceProvider) {
    this.loginRepositoryProvider = loginRepositoryProvider;
    this.visitRepositoryProvider = visitRepositoryProvider;
    this.locationRepositoryProvider = locationRepositoryProvider;
    this.locationDAOProvider = locationDAOProvider;
    this.userServiceProvider = userServiceProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(loginRepositoryProvider.get(), visitRepositoryProvider.get(), locationRepositoryProvider.get(), locationDAOProvider.get(), userServiceProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<LoginRepository> loginRepositoryProvider,
      Provider<VisitRepository> visitRepositoryProvider,
      Provider<LocationRepository> locationRepositoryProvider,
      Provider<LocationDAO> locationDAOProvider, Provider<UserService> userServiceProvider) {
    return new LoginViewModel_Factory(loginRepositoryProvider, visitRepositoryProvider, locationRepositoryProvider, locationDAOProvider, userServiceProvider);
  }

  public static LoginViewModel newInstance(LoginRepository loginRepository,
      VisitRepository visitRepository, LocationRepository locationRepository,
      LocationDAO locationDAO, UserService userService) {
    return new LoginViewModel(loginRepository, visitRepository, locationRepository, locationDAO, userService);
  }
}
